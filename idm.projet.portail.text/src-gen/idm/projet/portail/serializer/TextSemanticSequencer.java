/*
 * generated by Xtext 2.25.0
 */
package idm.projet.portail.serializer;

import com.google.inject.Inject;
import idm.projet.portail.services.TextGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import portail.Departement;
import portail.Formation;
import portail.Intervenant;
import portail.Parcours;
import portail.PortailPackage;
import portail.Ressource;
import portail.Seance;
import portail.Secretaire;
import portail.Semestre;
import portail.UE;
import portail.Universite;

@SuppressWarnings("all")
public class TextSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TextGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PortailPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PortailPackage.DEPARTEMENT:
				sequence_Departement(context, (Departement) semanticObject); 
				return; 
			case PortailPackage.FORMATION:
				sequence_Formation(context, (Formation) semanticObject); 
				return; 
			case PortailPackage.INTERVENANT:
				sequence_Intervenant(context, (Intervenant) semanticObject); 
				return; 
			case PortailPackage.PARCOURS:
				sequence_Parcours(context, (Parcours) semanticObject); 
				return; 
			case PortailPackage.RESSOURCE:
				sequence_Ressource(context, (Ressource) semanticObject); 
				return; 
			case PortailPackage.SEANCE:
				sequence_Seance(context, (Seance) semanticObject); 
				return; 
			case PortailPackage.SECRETAIRE:
				sequence_Secretaire(context, (Secretaire) semanticObject); 
				return; 
			case PortailPackage.SEMESTRE:
				sequence_Semestre(context, (Semestre) semanticObject); 
				return; 
			case PortailPackage.UE:
				sequence_UE(context, (UE) semanticObject); 
				return; 
			case PortailPackage.UNIVERSITE:
				sequence_Universite(context, (Universite) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Departement returns Departement
	 *
	 * Constraint:
	 *     (name=EString description=EString responsableDepartement=[Intervenant|EString] formations+=Formation formations+=Formation*)
	 */
	protected void sequence_Departement(ISerializationContext context, Departement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Formation returns Formation
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         description=EString 
	 *         credit=EInt 
	 *         secretaires+=[Secretaire|EString] 
	 *         secretaires+=[Secretaire|EString]* 
	 *         responsablesFormation+=[Intervenant|EString] 
	 *         responsablesFormation+=[Intervenant|EString]* 
	 *         (ues+=UE | parcours+=Parcours)*
	 *     )
	 */
	protected void sequence_Formation(ISerializationContext context, Formation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Employe returns Intervenant
	 *     Intervenant returns Intervenant
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         telephone=EString 
	 *         bureau=EString 
	 *         mail=EString 
	 *         specialite=EString 
	 *         (uesIntervenant+=[UE|EString] uesIntervenant+=[UE|EString]*)? 
	 *         (uesResponsable+=[UE|EString] uesResponsable+=[UE|EString]*)? 
	 *         responsableFormation=[Formation|EString]? 
	 *         responsableParcours=[Parcours|EString]?
	 *     )
	 */
	protected void sequence_Intervenant(ISerializationContext context, Intervenant semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parcours returns Parcours
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         description=EString 
	 *         competence=EString 
	 *         debouche=EString 
	 *         responsableParcours+=[Intervenant|EString] 
	 *         responsableParcours+=[Intervenant|EString]* 
	 *         semestres+=Semestre 
	 *         semestres+=Semestre*
	 *     )
	 */
	protected void sequence_Parcours(ISerializationContext context, Parcours semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Ressource returns Ressource
	 *
	 * Constraint:
	 *     (name=EString lien=EString)
	 */
	protected void sequence_Ressource(ISerializationContext context, Ressource semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PortailPackage.Literals.RESSOURCE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PortailPackage.Literals.RESSOURCE__NAME));
			if (transientValues.isValueTransient(semanticObject, PortailPackage.Literals.RESSOURCE__LIEN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PortailPackage.Literals.RESSOURCE__LIEN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRessourceAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getRessourceAccess().getLienEStringParserRuleCall_5_0(), semanticObject.getLien());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Seance returns Seance
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         date=EString 
	 *         heureDebut=EString 
	 *         heureFin=EString 
	 *         description=EString 
	 *         kind=SeanceKind 
	 *         (ressources+=Ressource ressources+=Ressource*)?
	 *     )
	 */
	protected void sequence_Seance(ISerializationContext context, Seance semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Employe returns Secretaire
	 *     Secretaire returns Secretaire
	 *
	 * Constraint:
	 *     (name=EString telephone=EString bureau=EString mail=EString formation=[Formation|EString])
	 */
	protected void sequence_Secretaire(ISerializationContext context, Secretaire semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PortailPackage.Literals.EMPLOYE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PortailPackage.Literals.EMPLOYE__NAME));
			if (transientValues.isValueTransient(semanticObject, PortailPackage.Literals.EMPLOYE__TELEPHONE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PortailPackage.Literals.EMPLOYE__TELEPHONE));
			if (transientValues.isValueTransient(semanticObject, PortailPackage.Literals.EMPLOYE__BUREAU) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PortailPackage.Literals.EMPLOYE__BUREAU));
			if (transientValues.isValueTransient(semanticObject, PortailPackage.Literals.EMPLOYE__MAIL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PortailPackage.Literals.EMPLOYE__MAIL));
			if (transientValues.isValueTransient(semanticObject, PortailPackage.Literals.SECRETAIRE__FORMATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PortailPackage.Literals.SECRETAIRE__FORMATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSecretaireAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getSecretaireAccess().getTelephoneEStringParserRuleCall_5_0(), semanticObject.getTelephone());
		feeder.accept(grammarAccess.getSecretaireAccess().getBureauEStringParserRuleCall_9_0(), semanticObject.getBureau());
		feeder.accept(grammarAccess.getSecretaireAccess().getMailEStringParserRuleCall_13_0(), semanticObject.getMail());
		feeder.accept(grammarAccess.getSecretaireAccess().getFormationFormationEStringParserRuleCall_17_0_1(), semanticObject.eGet(PortailPackage.Literals.SECRETAIRE__FORMATION, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Semestre returns Semestre
	 *
	 * Constraint:
	 *     (
	 *         name=EInt 
	 *         dateDebut=EString 
	 *         dateFin=EString 
	 *         (ueFacultatives+=[UE|EString] ueFacultatives+=[UE|EString]*)? 
	 *         ueObligatoires+=[UE|EString] 
	 *         ueObligatoires+=[UE|EString]*
	 *     )
	 */
	protected void sequence_Semestre(ISerializationContext context, Semestre semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UE returns UE
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         description=EString 
	 *         objectif=EString 
	 *         competence=EString 
	 *         evaluation=EString 
	 *         programme=EString 
	 *         typeEnseignement=EString 
	 *         Credit=EInt 
	 *         heureCM=EInt 
	 *         heureTD=EInt 
	 *         heureTP=EInt 
	 *         responsables+=[Intervenant|EString] 
	 *         responsables+=[Intervenant|EString]* 
	 *         intervenants+=[Intervenant|EString] 
	 *         intervenants+=[Intervenant|EString]* 
	 *         seances+=Seance 
	 *         seances+=Seance*
	 *     )
	 */
	protected void sequence_UE(ISerializationContext context, UE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Universite returns Universite
	 *
	 * Constraint:
	 *     (name=EString (departements+=Departement | employes+=Employe)*)
	 */
	protected void sequence_Universite(ISerializationContext context, Universite semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
